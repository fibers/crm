//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./fmmc_types');
//HELPER FUNCTIONS AND STRUCTURES

FmmcApi_sendQuestion_args = function(args) {
  this.questionDto = null;
  if (args) {
    if (args.questionDto !== undefined) {
      this.questionDto = args.questionDto;
    }
  }
};
FmmcApi_sendQuestion_args.prototype = {};
FmmcApi_sendQuestion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.questionDto = new ttypes.QuestionDto();
        this.questionDto.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendQuestion_args.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendQuestion_args');
  if (this.questionDto !== null && this.questionDto !== undefined) {
    output.writeFieldBegin('questionDto', Thrift.Type.STRUCT, 1);
    this.questionDto.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendQuestion_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.FmmcApiError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
FmmcApi_sendQuestion_result.prototype = {};
FmmcApi_sendQuestion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.FmmcApiError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendQuestion_result.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendQuestion_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendOffer_args = function(args) {
  this.offerDto = null;
  if (args) {
    if (args.offerDto !== undefined) {
      this.offerDto = args.offerDto;
    }
  }
};
FmmcApi_sendOffer_args.prototype = {};
FmmcApi_sendOffer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.offerDto = new ttypes.OfferDto();
        this.offerDto.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendOffer_args.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendOffer_args');
  if (this.offerDto !== null && this.offerDto !== undefined) {
    output.writeFieldBegin('offerDto', Thrift.Type.STRUCT, 1);
    this.offerDto.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendOffer_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.FmmcApiError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
FmmcApi_sendOffer_result.prototype = {};
FmmcApi_sendOffer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.FmmcApiError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendOffer_result.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendOffer_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendChat_args = function(args) {
  this.chatDto = null;
  if (args) {
    if (args.chatDto !== undefined) {
      this.chatDto = args.chatDto;
    }
  }
};
FmmcApi_sendChat_args.prototype = {};
FmmcApi_sendChat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chatDto = new ttypes.ChatDto();
        this.chatDto.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendChat_args.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendChat_args');
  if (this.chatDto !== null && this.chatDto !== undefined) {
    output.writeFieldBegin('chatDto', Thrift.Type.STRUCT, 1);
    this.chatDto.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendChat_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.FmmcApiError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
FmmcApi_sendChat_result.prototype = {};
FmmcApi_sendChat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.FmmcApiError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendChat_result.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendChat_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendFeedback_args = function(args) {
  this.feedbackDto = null;
  if (args) {
    if (args.feedbackDto !== undefined) {
      this.feedbackDto = args.feedbackDto;
    }
  }
};
FmmcApi_sendFeedback_args.prototype = {};
FmmcApi_sendFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.feedbackDto = new ttypes.FeedbackDto();
        this.feedbackDto.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendFeedback_args');
  if (this.feedbackDto !== null && this.feedbackDto !== undefined) {
    output.writeFieldBegin('feedbackDto', Thrift.Type.STRUCT, 1);
    this.feedbackDto.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendFeedback_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.FmmcApiError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
FmmcApi_sendFeedback_result.prototype = {};
FmmcApi_sendFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.FmmcApiError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendFeedback_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendMessage_args = function(args) {
  this.messageDto = null;
  if (args) {
    if (args.messageDto !== undefined) {
      this.messageDto = args.messageDto;
    }
  }
};
FmmcApi_sendMessage_args.prototype = {};
FmmcApi_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.messageDto = new ttypes.MessageDto();
        this.messageDto.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendMessage_args');
  if (this.messageDto !== null && this.messageDto !== undefined) {
    output.writeFieldBegin('messageDto', Thrift.Type.STRUCT, 1);
    this.messageDto.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApi_sendMessage_result = function(args) {
  this.error = null;
  if (args instanceof ttypes.FmmcApiError) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
FmmcApi_sendMessage_result.prototype = {};
FmmcApi_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.FmmcApiError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApi_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('FmmcApi_sendMessage_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApiClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
FmmcApiClient.prototype = {};
FmmcApiClient.prototype.sendQuestion = function(questionDto, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendQuestion(questionDto);
};

FmmcApiClient.prototype.send_sendQuestion = function(questionDto) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendQuestion', Thrift.MessageType.CALL, this.seqid);
  var args = new FmmcApi_sendQuestion_args();
  args.questionDto = questionDto;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FmmcApiClient.prototype.recv_sendQuestion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FmmcApi_sendQuestion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null)
};
FmmcApiClient.prototype.sendOffer = function(offerDto, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendOffer(offerDto);
};

FmmcApiClient.prototype.send_sendOffer = function(offerDto) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendOffer', Thrift.MessageType.CALL, this.seqid);
  var args = new FmmcApi_sendOffer_args();
  args.offerDto = offerDto;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FmmcApiClient.prototype.recv_sendOffer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FmmcApi_sendOffer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null)
};
FmmcApiClient.prototype.sendChat = function(chatDto, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendChat(chatDto);
};

FmmcApiClient.prototype.send_sendChat = function(chatDto) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendChat', Thrift.MessageType.CALL, this.seqid);
  var args = new FmmcApi_sendChat_args();
  args.chatDto = chatDto;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FmmcApiClient.prototype.recv_sendChat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FmmcApi_sendChat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null)
};
FmmcApiClient.prototype.sendFeedback = function(feedbackDto, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendFeedback(feedbackDto);
};

FmmcApiClient.prototype.send_sendFeedback = function(feedbackDto) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new FmmcApi_sendFeedback_args();
  args.feedbackDto = feedbackDto;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FmmcApiClient.prototype.recv_sendFeedback = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FmmcApi_sendFeedback_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null)
};
FmmcApiClient.prototype.sendMessage = function(messageDto, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendMessage(messageDto);
};

FmmcApiClient.prototype.send_sendMessage = function(messageDto) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new FmmcApi_sendMessage_args();
  args.messageDto = messageDto;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FmmcApiClient.prototype.recv_sendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FmmcApi_sendMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  callback(null)
};
FmmcApiProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FmmcApiProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FmmcApiProcessor.prototype.process_sendQuestion = function(seqid, input, output) {
  var args = new FmmcApi_sendQuestion_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendQuestion(args.questionDto, function (err, result) {
    var result = new FmmcApi_sendQuestion_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendQuestion", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FmmcApiProcessor.prototype.process_sendOffer = function(seqid, input, output) {
  var args = new FmmcApi_sendOffer_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendOffer(args.offerDto, function (err, result) {
    var result = new FmmcApi_sendOffer_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendOffer", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FmmcApiProcessor.prototype.process_sendChat = function(seqid, input, output) {
  var args = new FmmcApi_sendChat_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendChat(args.chatDto, function (err, result) {
    var result = new FmmcApi_sendChat_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendChat", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FmmcApiProcessor.prototype.process_sendFeedback = function(seqid, input, output) {
  var args = new FmmcApi_sendFeedback_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendFeedback(args.feedbackDto, function (err, result) {
    var result = new FmmcApi_sendFeedback_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendFeedback", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FmmcApiProcessor.prototype.process_sendMessage = function(seqid, input, output) {
  var args = new FmmcApi_sendMessage_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendMessage(args.messageDto, function (err, result) {
    var result = new FmmcApi_sendMessage_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

