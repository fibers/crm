//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.SellSide = {
'TARGET_IS_BUYER' : 1,
'TARGET_IS_SELLER' : 0
};
Party = module.exports.Party = function(args) {
  this.id = null;
  this.nick = null;
  this.head = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.nick !== undefined) {
      this.nick = args.nick;
    }
    if (args.head !== undefined) {
      this.head = args.head;
    }
  }
};
Party.prototype = {};
Party.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nick = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.head = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Party.prototype.write = function(output) {
  output.writeStructBegin('Party');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.nick !== null && this.nick !== undefined) {
    output.writeFieldBegin('nick', Thrift.Type.STRING, 2);
    output.writeString(this.nick);
    output.writeFieldEnd();
  }
  if (this.head !== null && this.head !== undefined) {
    output.writeFieldBegin('head', Thrift.Type.STRING, 3);
    output.writeString(this.head);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Item = module.exports.Item = function(args) {
  this.id = null;
  this.image = null;
  this.title = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.image !== undefined) {
      this.image = args.image;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
Item.prototype = {};
Item.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Item.prototype.write = function(output) {
  output.writeStructBegin('Item');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 2);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QuestionDto = module.exports.QuestionDto = function(args) {
  this.item = null;
  this.buyer = null;
  this.seller = null;
  this.isReply = null;
  this.content = null;
  this.entryId = null;
  if (args) {
    if (args.item !== undefined) {
      this.item = args.item;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.seller !== undefined) {
      this.seller = args.seller;
    }
    if (args.isReply !== undefined) {
      this.isReply = args.isReply;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    }
  }
};
QuestionDto.prototype = {};
QuestionDto.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.Item();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Party();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Party();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isReply = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.entryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QuestionDto.prototype.write = function(output) {
  output.writeStructBegin('QuestionDto');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 1);
    this.item.write(output);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 3);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  if (this.isReply !== null && this.isReply !== undefined) {
    output.writeFieldBegin('isReply', Thrift.Type.BOOL, 4);
    output.writeBool(this.isReply);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.I32, 6);
    output.writeI32(this.entryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OfferDto = module.exports.OfferDto = function(args) {
  this.item = null;
  this.buyer = null;
  this.seller = null;
  this.price = null;
  this.comment = null;
  this.sellSide = null;
  this.threadId = null;
  this.entryId = null;
  if (args) {
    if (args.item !== undefined) {
      this.item = args.item;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.seller !== undefined) {
      this.seller = args.seller;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
    if (args.sellSide !== undefined) {
      this.sellSide = args.sellSide;
    }
    if (args.threadId !== undefined) {
      this.threadId = args.threadId;
    }
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    }
  }
};
OfferDto.prototype = {};
OfferDto.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.Item();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Party();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Party();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sellSide = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.threadId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.entryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OfferDto.prototype.write = function(output) {
  output.writeStructBegin('OfferDto');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 1);
    this.item.write(output);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 3);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 5);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.sellSide !== null && this.sellSide !== undefined) {
    output.writeFieldBegin('sellSide', Thrift.Type.I32, 6);
    output.writeI32(this.sellSide);
    output.writeFieldEnd();
  }
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I32, 7);
    output.writeI32(this.threadId);
    output.writeFieldEnd();
  }
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.I32, 8);
    output.writeI32(this.entryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChatDto = module.exports.ChatDto = function(args) {
  this.item = null;
  this.buyer = null;
  this.seller = null;
  this.content = null;
  this.threadId = null;
  this.sellSide = null;
  this.entryId = null;
  if (args) {
    if (args.item !== undefined) {
      this.item = args.item;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.seller !== undefined) {
      this.seller = args.seller;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.threadId !== undefined) {
      this.threadId = args.threadId;
    }
    if (args.sellSide !== undefined) {
      this.sellSide = args.sellSide;
    }
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    }
  }
};
ChatDto.prototype = {};
ChatDto.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.Item();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Party();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Party();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.threadId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.sellSide = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.entryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatDto.prototype.write = function(output) {
  output.writeStructBegin('ChatDto');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 1);
    this.item.write(output);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 3);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I32, 5);
    output.writeI32(this.threadId);
    output.writeFieldEnd();
  }
  if (this.sellSide !== null && this.sellSide !== undefined) {
    output.writeFieldBegin('sellSide', Thrift.Type.BYTE, 6);
    output.writeByte(this.sellSide);
    output.writeFieldEnd();
  }
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.I32, 7);
    output.writeI32(this.entryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackDto = module.exports.FeedbackDto = function(args) {
  this.item = null;
  this.buyer = null;
  this.seller = null;
  this.rateNum = null;
  this.comment = null;
  this.sellSide = null;
  this.threadId = null;
  this.entryId = null;
  if (args) {
    if (args.item !== undefined) {
      this.item = args.item;
    }
    if (args.buyer !== undefined) {
      this.buyer = args.buyer;
    }
    if (args.seller !== undefined) {
      this.seller = args.seller;
    }
    if (args.rateNum !== undefined) {
      this.rateNum = args.rateNum;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
    if (args.sellSide !== undefined) {
      this.sellSide = args.sellSide;
    }
    if (args.threadId !== undefined) {
      this.threadId = args.threadId;
    }
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    }
  }
};
FeedbackDto.prototype = {};
FeedbackDto.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.Item();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.buyer = new ttypes.Party();
        this.buyer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.seller = new ttypes.Party();
        this.seller.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.rateNum = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sellSide = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.threadId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.entryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackDto.prototype.write = function(output) {
  output.writeStructBegin('FeedbackDto');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 1);
    this.item.write(output);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.STRUCT, 2);
    this.buyer.write(output);
    output.writeFieldEnd();
  }
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRUCT, 3);
    this.seller.write(output);
    output.writeFieldEnd();
  }
  if (this.rateNum !== null && this.rateNum !== undefined) {
    output.writeFieldBegin('rateNum', Thrift.Type.BYTE, 4);
    output.writeByte(this.rateNum);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 5);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.sellSide !== null && this.sellSide !== undefined) {
    output.writeFieldBegin('sellSide', Thrift.Type.I32, 6);
    output.writeI32(this.sellSide);
    output.writeFieldEnd();
  }
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I32, 7);
    output.writeI32(this.threadId);
    output.writeFieldEnd();
  }
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.I32, 8);
    output.writeI32(this.entryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageDto = module.exports.MessageDto = function(args) {
  this.receiverId = null;
  this.template = null;
  this.content = null;
  this.placeholders = null;
  if (args) {
    if (args.receiverId !== undefined) {
      this.receiverId = args.receiverId;
    }
    if (args.template !== undefined) {
      this.template = args.template;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.placeholders !== undefined) {
      this.placeholders = args.placeholders;
    }
  }
};
MessageDto.prototype = {};
MessageDto.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.receiverId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.template = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.placeholders = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.placeholders[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageDto.prototype.write = function(output) {
  output.writeStructBegin('MessageDto');
  if (this.receiverId !== null && this.receiverId !== undefined) {
    output.writeFieldBegin('receiverId', Thrift.Type.I32, 1);
    output.writeI32(this.receiverId);
    output.writeFieldEnd();
  }
  if (this.template !== null && this.template !== undefined) {
    output.writeFieldBegin('template', Thrift.Type.STRING, 2);
    output.writeString(this.template);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.placeholders !== null && this.placeholders !== undefined) {
    output.writeFieldBegin('placeholders', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.placeholders));
    for (var kiter8 in this.placeholders)
    {
      if (this.placeholders.hasOwnProperty(kiter8))
      {
        var viter9 = this.placeholders[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmmcApiError = module.exports.FmmcApiError = function(args) {
  Thrift.TException.call(this, "FmmcApiError")
  this.name = "FmmcApiError"
  this.errorCode = null;
  this.errorMsg = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMsg !== undefined) {
      this.errorMsg = args.errorMsg;
    }
  }
};
Thrift.inherits(FmmcApiError, Thrift.TException);
FmmcApiError.prototype.name = 'FmmcApiError';
FmmcApiError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmmcApiError.prototype.write = function(output) {
  output.writeStructBegin('FmmcApiError');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMsg !== null && this.errorMsg !== undefined) {
    output.writeFieldBegin('errorMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errorMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

